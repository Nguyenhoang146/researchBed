/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. Expr.jj */
/*@egen*/options {
              
                
                          
                                                      
                                                        
                           
                     
   IGNORE_CASE = true; // (default false)
}

PARSER_BEGIN(ExpressionParser)

public class ExpressionParser/*@bgen(jjtree)*/implements ExpressionParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected static JJTExpressionParserState jjtree = new JJTExpressionParserState();

/*@egen*/}

PARSER_END(ExpressionParser)

SKIP :
{ 
	"\t"
	|"\n"
	|"\r"
}

TOKEN : /* action */
{
	   < ADD: (" ")*"ADD" >
	|  < DO: (" ")*"DO">
	|  < UPDATE : (" ")*"UPDATE" >
	|  < LINK : (" ")*"LINK" >
	|  < QUANTIFIER: "EXACTLY" | "AT MOST" | "AT LEAST" >
    |  < SUCH_THAT: "SUCH THAT">
    |  < WHERE: (" ")+"WHERE" >
	|  < AND: (" ")+"AND" >
	|   < ALL: "*" >
	| 	< EOC		: (" ")*";" >
	| 	< ASSIGN	: (" ")*"="(" ")* >
}

TOKEN : //keywords
{
     < NUMBER : (<DIGIT>)+  >
	|   < STRING: (< LETTER >)+ >
	| 	< SPACES	: (< SPACE >)+ >
}


TOKEN :
{
	  < #DIGIT				: ["0"-"9"]>
	| < #LETTER				: ["A"-"Z", "a"-"z", "'", "-"] >
	| < #SPACE				: " " >
	
}

SSLStart parse()       :{/*@bgen(jjtree) Start */
  SSLStart jjtn000 = new SSLStart(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Start */
  try {
/*@egen*/
  (STATEMENT())+/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void STATEMENT():
{}
{
		ADD_EXPRESSION()
	|   DO_EXPRESSION()
	|	UPDATE_EXPRESSION()
}

void ADD_EXPRESSION()              :
{/*@bgen(jjtree) AddStatement */
  SSLAddStatement jjtn000 = new SSLAddStatement(JJTADDSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AddStatement */
  try {
/*@egen*/
  < ADD > < SPACES > CLASS_NUM_PARAMETER() < EOC >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void DO_EXPRESSION()             :
{/*@bgen(jjtree) DoStatement */
  SSLDoStatement jjtn000 = new SSLDoStatement(JJTDOSTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) DoStatement */
  try {
/*@egen*/
  < DO > < SPACES > DO_BODY() < EOC >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void UPDATE_EXPRESSION()                 :
{/*@bgen(jjtree) UpdateStatement */
  SSLUpdateStatement jjtn000 = new SSLUpdateStatement(JJTUPDATESTATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) UpdateStatement */
  try {
/*@egen*/
  < UPDATE > < SPACES > UPDATE_BODY() < EOC >/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
  }
/*@egen*/
}

void CLASS_NUM_PARAMETER() :
{}
{
	NUMBER_QUANTITY() < SPACES > CLASS_NAME()
}

void CLASS_ALL_PARAMETER() :
{}
{
	ALL_QUANTITY() < SPACES > CLASS_NAME()
}

void DO_BODY():
{}
{
	QUANTIFIER_ENUM() < SPACES > DO_PARAMETER()
}

void QUANTIFIER_ENUM():
{}
{
	<QUANTIFIER>/*@bgen(jjtree) Quantifier */
        {
          SSLQuantifier jjtn001 = new SSLQuantifier(JJTQUANTIFIER);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
        }
/*@egen*/
	{ 
		jjtn001.data.put("value",token.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/           
}

void DO_PARAMETER():
{}
{
	CLASS_NUM_PARAMETER() < SPACES > DO_ASSIGNMENT()
}



void NUMBER_QUANTITY() :
{}
{
	<NUMBER>/*@bgen(jjtree) Number */
        {
          SSLNumber jjtn001 = new SSLNumber(JJTNUMBER);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
        }
/*@egen*/
	{ 
		jjtn001.data.put("value",token.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/       
}

void ALL_QUANTITY() :
{}
{
	<ALL>/*@bgen(jjtree) All */
        {
          SSLAll jjtn001 = new SSLAll(JJTALL);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
        }
/*@egen*/
	{ 
		jjtn001.data.put("value",token.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/    
}

void CLASS_NAME() :
{}
{
	<STRING>/*@bgen(jjtree) Class */
        {
          SSLClass jjtn001 = new SSLClass(JJTCLASS);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
        }
/*@egen*/
	{ 
		jjtn001.data.put("value",token.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/      
}

void DO_ASSIGNMENT():
{}
{
	< SUCH_THAT > < SPACES > ASSIGNMENTS()
}

void ASSIGNMENTS()             :
{/*@bgen(jjtree) Assignments */
  SSLAssignments jjtn000 = new SSLAssignments(JJTASSIGNMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assignments */
        try {
/*@egen*/
	ASSIGNMENT() (< AND > < SPACES > ASSIGNMENT())*/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
}

void ASSIGNMENT()            :
{/*@bgen(jjtree) Assignment */
  SSLAssignment jjtn000 = new SSLAssignment(JJTASSIGNMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Assignment */
        try {
/*@egen*/
	PROPERTY() < ASSIGN > VALUE()/*@bgen(jjtree)*/
        } catch (Throwable jjte000) {
          if (jjtc000) {
            jjtree.clearNodeScope(jjtn000);
            jjtc000 = false;
          } else {
            jjtree.popNode();
          }
          if (jjte000 instanceof RuntimeException) {
            throw (RuntimeException)jjte000;
          }
          if (jjte000 instanceof ParseException) {
            throw (ParseException)jjte000;
          }
          throw (Error)jjte000;
        } finally {
          if (jjtc000) {
            jjtree.closeNodeScope(jjtn000, true);
          }
        }
/*@egen*/
	
}

void PROPERTY() :
{}
{
	<STRING>/*@bgen(jjtree) Property */
        {
          SSLProperty jjtn001 = new SSLProperty(JJTPROPERTY);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
        }
/*@egen*/
	{ 
		jjtn001.data.put("value",token.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/         
}

void VALUE() :
{}
{
	<STRING>/*@bgen(jjtree) Value */
        {
          SSLValue jjtn001 = new SSLValue(JJTVALUE);
          boolean jjtc001 = true;
          jjtree.openNodeScope(jjtn001);
        }
        try {
/*@egen*//*@bgen(jjtree)*/
        {
          jjtree.closeNodeScope(jjtn001, true);
          jjtc001 = false;
        }
/*@egen*/
	{ 
		jjtn001.data.put("value",token.image);
	}/*@bgen(jjtree)*/
        } finally {
          if (jjtc001) {
            jjtree.closeNodeScope(jjtn001, true);
          }
        }
/*@egen*/      
}

void UPDATE_BODY():
{}
{
  	CLASS_PARAMETER() < SPACES > ASSIGNMENTS() (UPDATE_CONDITION())?
}

void CLASS_PARAMETER():
{}
{
  	CLASS_NUM_PARAMETER()
  	| CLASS_ALL_PARAMETER()
}


void UPDATE_CONDITION():
{}
{
  	< WHERE > < SPACES > ASSIGNMENTS()
}
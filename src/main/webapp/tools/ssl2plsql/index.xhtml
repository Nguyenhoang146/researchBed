<HTML xmlns:h="http://java.sun.com/jsf/html">

<HEAD>

    <script src="blockly/blockly_compressed.js"></script>

    <script src="blockly/blocks/logic.js"></script>
    <script src="blockly/blocks/loops.js"></script>
    <script src="blockly/blocks/math.js"></script>
    <script src="blockly/blocks/text.js"></script>
    <script src="blockly/blocks/lists.js"></script>
    <script src="blockly/blocks/colour.js"></script>
    <script src="blockly/blocks/variables.js"></script>
    <script src="blockly/blocks/procedures.js"></script>
    
    <script src="blockly/javascript_compressed.js"></script>

    <script src="blockly/msg/js/en.js"></script>       

<TITLE>SSL2PLSQL</TITLE>
<style>
    body {
      background-color: #fff;
      font-family: sans-serif;
    }
  </style>
</HEAD>

<BODY BGCOLOR="FFFFFF">
<h1>
Scripting Structure Language to Procedural Language SQL (SSL2PLSQL)
<h:outputLink style="font-weight: normal; font-size: 18px; float: right;"
value="../index.html">
Back
</h:outputLink>
</h1>
<hr/>
	<h:form id="unique-form" styleClass="ui-g-12">
		<div class="ui-g-12" style="padding-bottom: 10px;">
			<p>
			This web service is intended for readers of my thesis:
      <b>A Web-based Validator For Data Constraints</b>
      <h:commandButton style="margin-left: 10px; margin-right: 10px;" styleClass="ui-g-12" 
			onclick="genDataScript();" value="Generate" action="#{ssl2plsqlBean.genData}"/>
      <h:commandButton style="margin-right: 10px;" type="button" styleClass="ui-g-12" onclick="help();" value="Review"/>
      <h:commandButton style="margin-right: 10px;" type="button" value="Export" onclick="toXml()"/>
      <input type='file' style="margin-right: 10px;" lang="en" title="Import" accept='.ssl' onchange='openFile(event)'/>
			</p>
			<h:inputText id="hidden-result" style="display: none;"/>
    </div>
      
        <div class="ui-g-12" style="height: 70%;">
      		<div id="blocklyDiv" style="display: inline-block; width: 60%; float:left;"></div>
      		<div style="float: left; width: 30%;">
	      		<h:inputTextarea style="display: inline-block; height: 50%; width: 100%; resize: none;" id="data-model" 
	      		value="JSON Data model:"/>
	      		<h:inputTextarea id="appear-result" disabled="true"
	      		style="display: inline-block; height: 50%; width: 100%; resize:none;" value="SSL output:"/>
      		</div>
	  	</div>
      
        <xml id="toolbox" style="display: none">

          <!-- <category name="Starter">
                  <block type="list_statements"></block>
          </category> -->
          
          <category name="Action">
            <label text="ADD Statement"></label>
            <sep gap="4"></sep>
            <block type="action_add"/>
            <sep gap="10"></sep>
            <label text="DO Statement"></label>
            <sep gap="4"></sep>
            <block type="action_do"/>
            <sep gap="10"></sep>
            <label text="UPDATE Statement"></label>
            <sep gap="4"></sep>
            <block type="action_update"/>
            <sep gap="10"></sep>
            <label text="LINK Statement"></label>
            <sep gap="4"></sep>
            <block type="action_link"/>
            <sep gap="10"></sep>
          </category>
          <category name="Logic">
            <label text="Comparison Operation"></label>
            <sep gap="4"></sep>
            <block type="logic_compare"/>
            <sep gap="10"></sep>
            <label text="Binary Logic Operation"></label>
            <sep gap="4"></sep>
            <block type="logic_operation"/>
            <sep gap="10"></sep>
          </category>
          <category name="Input">
            <label text="A number field"></label>
            <sep gap="4"></sep>
            <block type="math_number"/>
            <sep gap="10"></sep>
            <label text="A forAll identifier"></label>
            <sep gap="4"></sep>
            <block type="forall"/>
            <sep gap="10"></sep>
            <label text="A text field"></label>
            <sep gap="4"></sep>
            <block type="text"/>
            <sep gap="10"></sep>
            <label text="A class field"></label>
            <sep gap="4"></sep>
            <block type="class_string"/>
            <sep gap="10"></sep>
            <label text="An class attribute field"></label>
            <sep gap="4"></sep>
            <block type="attribute_string"/>
            <sep gap="10"></sep>
            <label text="An association class field"></label>
            <sep gap="4"></sep>
            <block type="assoc_string"/>
            <sep gap="10"></sep>
            <label text="An OCL expression field"></label>
            <sep gap="4"></sep>
            <block type="ocl_text"/>
            <sep gap="10"></sep>
          </category>
              
        </xml>
              <xml id="startBlocks" style="display: none">
                <block type="list_statements" inline="false" x="50" y="50" deletable="false"></block>
              </xml>
           </h:form>
           <script>
                var demoWorkspace = Blockly.inject('blocklyDiv',
                    {media: 'blockly/media/',
                     toolbox: document.getElementById('toolbox'),
                     zoom:
                    {controls: true,
                      wheel: false,
                      startScale: 0.7,
                      maxScale: 3,
                      minScale: 0.3,
                      scaleSpeed: 1.2}
                     });
                	Blockly.Xml.domToWorkspace(document.getElementById('startBlocks'),
                                           demoWorkspace);
                function genDataScript() {
                  // Generate JavaScript code and display it.
                  Blockly.JavaScript.INFINITE_LOOP_TRAP = null;
                  var input = document.getElementById('unique-form:hidden-result');
                  input.value = Blockly.JavaScript.workspaceToCode(demoWorkspace);
                }
                function help() {
                    // Generate JavaScript code and display it.
                	Blockly.JavaScript.INFINITE_LOOP_TRAP = null;
                    var input = document.getElementById('unique-form:appear-result');
                    input.value = 'SSL output:\n===========================\n' + Blockly.JavaScript.workspaceToCode(demoWorkspace);
                }
                
                function download(data, filename, type) {
                    var file = new Blob([data], {type: type});
                    if (window.navigator.msSaveOrOpenBlob) // IE10+
                        window.navigator.msSaveOrOpenBlob(file, filename);
                    else { // Others
                        var a = document.createElement("a"),
                                url = URL.createObjectURL(file);
                        a.href = url;
                        a.download = filename;
                        document.body.appendChild(a);
                        a.click();
                        setTimeout(function() {
                            document.body.removeChild(a);
                            window.URL.revokeObjectURL(url);  
                        }, 0); 
                    }
                }
                
                var openFile = function(event) {
                    var input = event.target;

                    var reader = new FileReader();
                    reader.onload = function(){
                      var text = reader.result;
                      var contentBlock = text.slice(0, text.indexOf('-=-=-=-=-='));
                      var contentDataModel = text.slice(text.lastIndexOf('-=-=-=-=-=')+10);
                      var output = document.getElementById('unique-form:data-model');
                      output.value = contentDataModel;
                      var xml = Blockly.Xml.textToDom(contentBlock);
                      demoWorkspace.clear();
                      Blockly.Xml.domToWorkspace(xml, demoWorkspace);
                    };
                    reader.readAsText(input.files[0]);
                  };
                
                function toXml() {
               	  var xml = Blockly.Xml.workspaceToDom(demoWorkspace);
               	  var contentBlock = Blockly.Xml.domToPrettyText(xml);
               	  var contentDataModel = document.getElementById('unique-form:data-model');
               	  var content = contentBlock + '-=-=-=-=-=' + contentDataModel.value;
               	  download(content, 'output.ssl', 'text/plain');
               	}
              </script>
            </BODY>
            </HTML>